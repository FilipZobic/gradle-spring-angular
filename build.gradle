plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
    id 'com.google.cloud.tools.jib' version '3.3.0'
	id "org.sonarqube" version "3.4.0.2513"
	id 'jacoco'
	id "org.barfuin.gradle.taskinfo" version "2.0.0"
}

group = 'io.zobic'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

if (hasProperty('buildScan')) {
	buildScan {
		termsOfServiceUrl = 'https://gradle.com/terms-of-service'
		termsOfServiceAgree = 'yes'
	}
}
testing {
	suites {
		integrationTest(JvmTestSuite) {
			dependencies {
				implementation project
			}
		}
	}
}
// check depends on integrationTest & test but test does not depend on integration test and vice
// versa we can check this with tiTree
tasks.named('check') {
	dependsOn testing.suites.integrationTest
}
jacocoTestReport {
	executionData integrationTest
	reports {
		xml.required = true
	}
	dependsOn test, integrationTest
}

tasks.named('sonarqube').configure {
	dependsOn jacocoTestReport
}
//Project != project one is interface one is impl System is impl

sonarqube {
	// we defined sonarqube connection properties in ~/gradle.properties or in github actions secrets and call them with -D flag
	//	setting system properties with the -D flag
	//	setting project properties with the -P flag
	properties {
//		This one returns void to closure so nothing changes (except for changing references variable)
		properties["sonar.tests"] += sourceSets.integrationTest.allSource.srcDirs
		//property 'sonar.host.url', projectProperties.get('sonar.host.url')
//		def projectProperties = project.getProperties()
		if (System.getProperty("SONAR_HOST_URL") != null) {
			properties["sonar.host.url"] = System.getProperty("SONAR_HOST_URL")
		}
		if (System.getProperty("SONAR_ORGANIZATION") != null) {
			properties["sonar.organization"] = projectProperties.get("SONAR_ORGANIZATION")
		}
		if (System.getProperty("SONAR_PROJECT_KEY") != null) {
			properties["sonar.projectKey"] = projectProperties.get("SONAR_PROJECT_KEY")
		}

		if (System.getProperty("SONAR_LOGIN") != null) {
			properties["sonar.login"] = projectProperties.get("SONAR_LOGIN")
		}
	}
//	Warning for gradle The one under is bad since it targets gradle global API
//	properties["sonars.tests"] += sourceSets.integrationTest.allSource.srcDirs
}

// JIB

// Shared (local & remote)
jib {
	from {
		image = 'eclipse-temurin:17-jre'
	}
	container {
		ports = ['8080']
		format = 'OCI'
		containerizingMode = 'packaged'
	}
}
// task containerize API then SPA tasks and one task called containerize depends on both doLast should be jibDockerBuild
// Local
tasks.named('jibDockerBuild') {
	dependsOn {
		tasks.named('test')
	}
	doFirst {
		jib {
			to {
				image = 'gradle-spring-angular'
				credHelper = 'osxkeychain'
				tags = ['latest']
			}
		}
	}
}

// Remote
tasks.named('jib') {
	dependsOn {
		tasks.named('test')
	}
	doFirst {
		if (!project.hasProperty('remoteRegistry')
				|| !project.hasProperty("remoteImage")) {
			throw new GradleException("Both 'remoteRegistry' & 'remoteImage' variables are required")
		}
		def remoteRegistry = project.getProperties().get("remoteRegistry")
		def remoteImage = project.getProperties().get("remoteImage")
		jib {
			to {
				image = "$remoteRegistry/$remoteImage"
				credHelper = 'ecr-login'
				tags = ['latest']
			}
		}
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-web:2.7.3'
}

tasks.named('test') {
	useJUnitPlatform()
}
